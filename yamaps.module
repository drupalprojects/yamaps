<?php

/**
 * @file
 * Yandex Maps module main file.
 */

/**
 * Constants.
 */
define('YAMAPS_API_URL', 'http://api-maps.yandex.ru/2.0/');
define('YAMAPS_STATIC_API_URL', 'http://static-maps.yandex.ru/1.x/');
define('YAMAPS_GEOCODER_URL', 'http://geocode-maps.yandex.ru/1.x/');
define('YAMAPS_LEGAL_AGREEMENT_URL', 'http://legal.yandex.ru/maps_api/');
define('YAMAPS_API_LANGUAGE', 'ru-RU');
define('YAMAPS_DEFAULT_BLOCK_DELTA', 'yamaps');
define('YAMAPS_DEFAULT_BLOCK_AMOUNT', 1);
define('YAMAPS_DEFAULT_BLOCK_MAP_WIDTH', '168px');
define('YAMAPS_DEFAULT_BLOCK_MAP_HEIGHT', '200px');

/**
 * Includes.
 */
module_load_include('inc', 'yamaps', 'yamaps.functions');
module_load_include('inc', 'yamaps', 'inc/yamaps.formatter');
module_load_include('inc', 'yamaps', 'inc/yamaps.widget');
module_load_include('inc', 'yamaps', 'inc/yamaps.block');

/**
 * Implements hook_menu().
 */
function yamaps_menu() {
  $items['admin/config/services/yamaps'] = array(
    'title' => 'Yandex Maps configuration',
    'description' => t('Yandex Maps configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yamaps_settings_page'),
    'access arguments' => array('administer yamaps settings'),
    'file' => 'yamaps.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function yamaps_permission() {
  return array(
    'administer yamaps settings' => array(
      'title' => t('Administer Yandex Maps settings'),
      'description' => t('Manage Yandex Maps configuration parameters.'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function yamaps_field_info() {
  return array(
    'field_yamaps' => array(
      'label' => t('Yandex map'),
      'default_widget' => 'yamaps_field',
      'default_formatter' => 'field_yamaps_formatter_dynamic',
      'settings' => array(
        'display_options' => array(
          'display_type' => 'map',
          'open_button_text' => 'Open map',
        ),
      )
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function yamaps_field_is_empty($item, $field) {
  return empty($item['coords']);
}

/**
 * Implements hook_element_info().
 */
function yamaps_element_info() {
  return array(
    'yamaps_field' => array(
      '#input' => TRUE,
      '#theme_wrappers' => array('form_element'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function yamaps_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form['display_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display options'),
    '#tree' => TRUE,

  );
  $form['display_options']['display_type'] = array(
    '#type' => 'radios',
    '#title' => t('Map display style in admin UI for field'),
    '#options' => array(
      'map' => t('Map'),
      'map_button' => t('Map opened by button click'),
    ),
    '#default_value' => $settings['display_options']['display_type'],
    '#required' => FALSE,
    '#description' => t('Configure how to display "Yandex Map" field while creating new / updating material.
    This setting applies to admin UI only. To display map opening by button click for end users select appropriate option
    in "Manage Display" section of the appropriate content type.'),
  );

  $form['display_options']['open_button_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Button text'),
    '#default_value' => $settings['display_options']['open_button_text'],
    '#required' => FALSE,
    '#description' => t('Specify text to display on button that opens map in case of "Map opened by button click" option.
    This setting applies to admin UI only. To configure text on the button opening map for end users select appropriate
    option in "Manage Display" section of the appropriate content type.'),
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][display_options][display_type]"]' => array(
          'value' => 'map_button',
        ),
      ),
    ),
  );

  return $form;
}

/**
 * Implements hook_library().
 */
function yamaps_library() {
  // Users language.
  global $language;
  // Module path.
  $path = drupal_get_path('module', 'yamaps') . '/misc/';
  // Weight counter.
  $w = 10;
  // API url.
  $api_url = url(YAMAPS_API_URL, array('absolute' => TRUE, 'query' => array(
    'load' => 'package.full',
    'lang' => YAMAPS_API_LANGUAGE,
    'wizard' => 'Drupal_yamaps_' . $language->language,
  )));

  $libraries['yamaps.full'] = array(
    'title' => 'Yandex maps. Version for dynamic map.',
    'version' => '2.x',
    'js' => array(
      $api_url => array(
        'type' => 'external',
        'scope' => 'footer',
        'weight' => $w++,
      ),
      $path . 'yamaps.init.js' => array('scope' => 'footer', 'weight' => $w++),
      $path . 'yamaps.layouts.js' => array(
        'scope' => 'footer',
        'weight' => $w++,
      ),
      $path . 'yamaps.placemark.js' => array(
        'scope' => 'footer',
        'weight' => $w++,
      ),
      $path . 'yamaps.line.js' => array('scope' => 'footer', 'weight' => $w++),
      $path . 'yamaps.polygon.js' => array(
        'scope' => 'footer',
        'weight' => $w++,
      ),
      $path . 'yamaps.route.js' => array('scope' => 'footer', 'weight' => $w++),
      $path . 'yamaps.maps.js' => array('scope' => 'footer', 'weight' => $w++),
      $path . 'yamaps.run.js' => array('scope' => 'footer', 'weight' => $w++),
      /* field button script */
      $path . 'yamaps.field.js' => array('scope' => 'footer', 'weight' => $w++),
    ),
    'css' => array(
      $path . 'yamaps.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_help().
 */
function yamaps_help($path, $arg) {
  if ($path == 'admin/help#yamaps') {
    // Return a line-break version of the module README.txt.
    return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}
