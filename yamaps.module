<?php

/**
 * @file
 * Yandex Maps module main file.
 */

/**
 * Constants.
 */
define('YAMAPS_API_URL', 'http://api-maps.yandex.ru/2.0/');
define('YAMAPS_GEOCODER_URL', 'http://geocode-maps.yandex.ru/1.x/');
define('YAMAPS_API_LANGUAGE', 'ru-RU');
define('YAMAPS_DEFAULT_BLOCK_DELTA', 'yamaps');
define('YAMAPS_DEFAULT_BLOCK_AMOUNT', 1);
define('YAMAPS_DEFAULT_BLOCK_MAP_WIDTH', '168px');
define('YAMAPS_DEFAULT_BLOCK_MAP_HEIGHT', '200px');

/**
 * Includes.
 */
module_load_include('inc', 'yamaps', 'inc/yamaps.formatter');
module_load_include('inc', 'yamaps', 'inc/yamaps.widget');
module_load_include('inc', 'yamaps', 'inc/yamaps.block');

/**
 * Implements hook_menu().
 */
function yamaps_menu() {
  $items['admin/config/services/yamaps'] = array(
    'title' => 'Yandex Maps configuration',
    'description' => t('Yandex Maps configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yamaps_settings_page'),
    'access arguments' => array('administer yamaps settings'),
    'file' => 'yamaps.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function yamaps_permission() {
  return array(
    'administer yamaps settings' => array(
      'title' => t('Administer Yandex Maps settings'),
      'description' => t('Manage Yandex Maps configuration parameters.'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function yamaps_field_info() {
  return array(
    'field_yamaps' => array(
      'label' => t('Yandex map'),
      'default_widget' => 'yamaps_field',
      'default_formatter' => 'field_yamaps_formatter_dynamic',
      'settings' => array(
        'display_options' => array(
          'display_type' => 'map',
          'open_button_text' => 'Open map',
        ),
      )
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function yamaps_field_is_empty($item, $field) {
  return empty($item['coords']);
}

/**
 * Implements hook_element_info().
 */
function yamaps_element_info() {
  return array(
    'yamaps_field' => array(
      '#input' => TRUE,
      '#theme_wrappers' => array('form_element'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function yamaps_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form['display_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display options'),
    '#tree' => TRUE,

  );
  $form['display_options']['display_type'] = array(
    '#type' => 'radios',
    '#title' => t('Select displaying type of map.'),
    '#options' => array(
      'map' => t('Map'),
      'map_button' => t('Map opened by button click'),
    ),
    '#default_value' => $settings['display_options']['display_type'],
    '#required' => FALSE,
    '#description' => t('The maximum length of the field in characters. Leave blank for an unlimited size.'),
  );

  $form['display_options']['open_button_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Button text'),
    '#default_value' => $settings['display_options']['open_button_text'],
    '#required' => FALSE,
    '#description' => t('The maximum length of the field in characters. Leave blank for an unlimited size.'),
  );

  return $form;
}

/**
 * Implements hook_library().
 */
function yamaps_library() {
  // Users language.
  global $language;
  // Module path.
  $path = drupal_get_path('module', 'yamaps') . '/misc/';
  // Weight counter.
  $w = 10;
  // API url.
  $api_url = url(YAMAPS_API_URL, array('absolute' => TRUE, 'query' => array(
    'load' => 'package.full',
    'lang' => YAMAPS_API_LANGUAGE,
    'wizard' => 'Drupal_yamaps_' . $language->language,
  )));

  $libraries['yamaps.full'] = array(
    'title' => 'Yandex maps. Edit mode.',
    'version' => '2.x',
    'js' => array(
      $api_url => array(
        'type' => 'external',
        'scope' => 'footer',
        'weight' => $w++,
      ),
      $path . 'yamaps.init.js' => array('scope' => 'footer', 'weight' => $w++),
      $path . 'yamaps.layouts.js' => array(
        'scope' => 'footer',
        'weight' => $w++,
      ),
      $path . 'yamaps.placemark.js' => array(
        'scope' => 'footer',
        'weight' => $w++,
      ),
      $path . 'yamaps.line.js' => array('scope' => 'footer', 'weight' => $w++),
      $path . 'yamaps.polygon.js' => array(
        'scope' => 'footer',
        'weight' => $w++,
      ),
      $path . 'yamaps.route.js' => array('scope' => 'footer', 'weight' => $w++),
      $path . 'yamaps.maps.js' => array('scope' => 'footer', 'weight' => $w++),
      $path . 'yamaps.run.js' => array('scope' => 'footer', 'weight' => $w++),
      /* field button script */
      $path . 'yamaps.field.js' => array('scope' => 'footer', 'weight' => $w++),
    ),
    'css' => array(
      $path . 'yamaps.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_help().
 */
function yamaps_help($path, $arg) {
  if ($path == 'admin/help#yamaps') {
    // Return a line-break version of the module README.txt.
    return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Process field for edit form.
 * @see yamaps_element_info().
 *
 * @param $element
 * @param $form_state
 * @param $complete_form
 *
 * @return mixed
 */
function yamaps_field_process($element, $form_state, $complete_form) {
  // Issue #1712292 fix.
  // TODO: Need to be deleted when Fields API fixed.
  if (isset($element['#entity']) && $entity = $element['#entity']) {
    if (isset($entity->vid) && !$element['#value']) {
      $entity_type = $element['#entity_type'];
      $field_name = $element['#field_name'];
      $instance = field_info_instance($entity_type, $field_name, $entity->type);
      $field = field_info_field($field_name);
      $default_value = field_get_default_value($entity_type, $entity, $field, $instance);
      $element['#default_value'] = $element['#value'] = reset($default_value);
    }
  }

  // Map information.
  $coords = isset($element['#value']['coords']) ? $element['#value']['coords'] : NULL;
  $coords_array = drupal_json_decode($coords);
  $type = isset($element['#value']['type']) ? $element['#value']['type'] : 'yandex#map';
  $placemarks = isset($element['#value']['placemarks']) ? $element['#value']['placemarks'] : NULL;
  $placemarks_array = drupal_json_decode($placemarks);
  $lines = isset($element['#value']['lines']) ? $element['#value']['lines'] : NULL;
  $lines_array = drupal_json_decode($lines);
  $polygons = isset($element['#value']['polygons']) ? $element['#value']['polygons'] : NULL;
  $polygons_array = drupal_json_decode($polygons);
  $routes = isset($element['#value']['routes']) ? $element['#value']['routes'] : NULL;
  $routes_array = drupal_json_decode($routes);

  // Unique map id.
  $id = drupal_html_id(implode('-', array(
    'ymap',
    $element['#delta'],
    'edit',
  )));

  // Unique map button id.
  $open_button_id = drupal_html_id(implode('-', array($id, 'open_button')));
  $remove_button_id = drupal_html_id(implode('-', array($id, 'remove_button')));
  $display_options = variable_get('yamaps_block_edit_display_options', array());
  $behaviors = array('scrollZoom', 'dblClickZoom', 'drag');

  // Map initialization parameters.
  $map = array(
    'init' => array(
      'center' => $coords_array['center'],
      'zoom' => $coords_array['zoom'],
      'type' => $type,
      'behaviors' => $behaviors,
    ),
    'display_options' => array(
      'display_type' => isset($display_options['display_type']) ? $display_options['display_type'] : 'map',
      'open_button_text' => isset($display_options['open_button_text']) ? t($display_options['open_button_text']) : t('Open map'),
      'open_button_id' => $open_button_id,
      'remove_button_id' => $remove_button_id,
    ),
    'controls' => 1,
    'traffic' => 0,
    'placemarks' => $placemarks_array,
    'lines' => $lines_array,
    'polygons' => $polygons_array,
    'routes' => $routes_array,
    'edit' => TRUE,
  );

  // Add information about this map to js.
  drupal_add_js(array('yamaps' => array($id => $map)), 'setting');
  // Load library.
  drupal_add_library('yamaps', 'yamaps.full');

  // Map container.
  $element['map'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => isset($display_options['open_button_text']) ? t($display_options['open_button_text']) : t('Open map'),
    '#attributes' => array(
      'id' => $id,
      'class' => array(
        'yamaps-map-container',
      ),
    ),
  );

  // Hidden elements to save map information.
  $element['coords'] = array(
    '#type' => 'hidden',
    '#title' => t('Coordinates'),
    '#default_value' => $coords,
    '#required' => $element['#required'],
    '#attributes' => array('class' => array('field-yamaps-coords-' . $id)),
  );

  $element['type'] = array(
    '#type' => 'hidden',
    '#title' => t('Type'),
    '#default_value' => $type,
    '#attributes' => array('class' => array('field-yamaps-type-' . $id)),
  );

  $element['placemarks'] = array(
    '#type' => 'hidden',
    '#title' => t('Placemarks'),
    '#default_value' => $placemarks,
    '#attributes' => array('class' => array('field-yamaps-placemarks-' . $id)),
  );

  $element['lines'] = array(
    '#type' => 'hidden',
    '#title' => t('Lines'),
    '#default_value' => $lines,
    '#attributes' => array('class' => array('field-yamaps-lines-' . $id)),
  );

  $element['polygons'] = array(
    '#type' => 'hidden',
    '#title' => t('Polygons'),
    '#default_value' => $polygons,
    '#attributes' => array('class' => array('field-yamaps-polygons-' . $id)),
  );

  $element['routes'] = array(
    '#type' => 'hidden',
    '#title' => t('Routes'),
    '#default_value' => $routes,
    '#attributes' => array('class' => array('field-yamaps-routes-' . $id)),
  );

  if (isset($display_options['display_type']) && ($display_options['display_type'] == 'map_button')) {
    $element['open_map_button'] = array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t($display_options['open_button_text']),
      '#attributes' => array(
        'id' => $open_button_id,
        'class' => 'open_yamap_button',
        'mapId' => $id,
      ),
    );
  }

  // Map description.
  $element['#description'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => l(
      t('Terms of service «API Yandex.Maps»'),
      'http://legal.yandex.ru/maps_api/',
      array('attributes' => array('target' => '_blank'))
    ),
    '#attributes' => array(
      'class' => 'yamaps-terms',
    ),
  );

  return $element;
}

/**
 * Validate pixels or percentage value.
 *
 * @param $element
 * @param $form_state
 */
function yamaps_field_validate_pixels_percentage($element, &$form_state) {
  $value = $element['#value'];
  if (!preg_match('/^[1-9]{1}[0-9]*(px|%)$/', $value)) {
    form_error($element, t('%name must be a positive integer or percentage value.', array('%name' => $element['#title'])));
  }
}

/**
 * Get geo data for string.
 *
 * @param string $geolocation_string
 *
 * @return array|bool
 */
function yamaps_geocoding($geolocation_string) {
  if (!$geolocation_string) {
    return FALSE;
  }

  // Preparing geocoding string.
  $query = array(
    'format' => 'json',
    'geocode' => $geolocation_string,
    'results' => 1,
  );

  $geolocation_request = file_get_contents(url(YAMAPS_GEOCODER_URL, array(
    'query' => $query,
    'absolute' => TRUE,
  )));

  $geolocation_request = json_decode($geolocation_request);

  if ($geolocation_request->response->GeoObjectCollection->metaDataProperty->GeocoderResponseMetaData->found > 0) {
    $map_center = $geolocation_request->response->GeoObjectCollection->featureMember[0]->GeoObject->Point->pos;
    $boundedBy = array();
    $boundedBy[] = array_map('yamaps_var_to_float', array_reverse(explode(' ', $geolocation_request->response->GeoObjectCollection->featureMember[0]->GeoObject->boundedBy->Envelope->lowerCorner)));
    $boundedBy[] = array_map('yamaps_var_to_float', array_reverse(explode(' ', $geolocation_request->response->GeoObjectCollection->featureMember[0]->GeoObject->boundedBy->Envelope->upperCorner)));

    return array(
      'map_center' => array_map('yamaps_var_to_float', array_reverse(explode(' ', $map_center))),
      'bounds' => $boundedBy,
    );
  }
  else {
    return FALSE;
  }
}

/**
 * Set variable to float.
 *
 * @param $val
 *
 * @return float
 */
function yamaps_var_to_float($val) {
  return (float) $val;
}
